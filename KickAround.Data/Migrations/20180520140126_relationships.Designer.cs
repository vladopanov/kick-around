// <auto-generated />
using KickAround.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace KickAround.Data.Migrations
{
    [DbContext(typeof(KickAroundContext))]
    [Migration("20180520140126_relationships")]
    partial class relationships
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KickAround.Models.Entities.AttendeeMatch", b =>
                {
                    b.Property<string>("AttendeeId");

                    b.Property<string>("MatchId");

                    b.HasKey("AttendeeId", "MatchId");

                    b.HasIndex("MatchId");

                    b.ToTable("AttendeeMatch");
                });

            modelBuilder.Entity("KickAround.Models.Entities.Group", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("KickAround.Models.Entities.Match", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("EndDate");

                    b.Property<string>("GroupId");

                    b.Property<bool>("IsWeekly");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("KickAround.Models.Entities.PlayerGroup", b =>
                {
                    b.Property<string>("PlayerId");

                    b.Property<string>("GroupId");

                    b.HasKey("PlayerId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("PlayerGroup");
                });

            modelBuilder.Entity("KickAround.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KickAround.Models.Entities.AttendeeMatch", b =>
                {
                    b.HasOne("KickAround.Models.Entities.User", "Attendee")
                        .WithMany("AttendeeMatches")
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KickAround.Models.Entities.Match", "Match")
                        .WithMany("AttendeeMatches")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KickAround.Models.Entities.Match", b =>
                {
                    b.HasOne("KickAround.Models.Entities.Group", "Group")
                        .WithMany("Matches")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("KickAround.Models.Entities.PlayerGroup", b =>
                {
                    b.HasOne("KickAround.Models.Entities.Group", "Group")
                        .WithMany("PlayerGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KickAround.Models.Entities.User", "Player")
                        .WithMany("PlayerGroups")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
